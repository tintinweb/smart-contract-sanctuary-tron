//SourceUnit: ERC20.sol

pragma solidity ^0.5.0;

import "./IERC20.sol";
import "./SafeMath.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20Mintable}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin guidelines: functions revert instead
 * of returning `false` on failure. This behavior is nonetheless conventional
 * and does not conflict with the expectations of ERC20 applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is IERC20 {
    using SafeMath for uint256;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 value) public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `value`.
     * - the caller must have allowance for `sender`'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements
     *
     * - `to` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

     /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 value) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 value) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }

    /**
     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted
     * from the caller's allowance.
     *
     * See {_burn} and {_approve}.
     */
    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
    }
}

//SourceUnit: ERC20Detailed.sol

pragma solidity ^0.5.0;

import "./IERC20.sol";

/**
 * @dev Optional functions from the ERC20 standard.
 */
contract ERC20Detailed is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    /**
     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of
     * these values are immutable: they can only be set once during
     * construction.
     */
    constructor (string memory name, string memory symbol, uint8 decimals) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}



//SourceUnit: IERC20.sol

pragma solidity ^0.5.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP. Does not include
 * the optional functions; to access them see {ERC20Detailed}.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


//SourceUnit: SafeMath.sol

pragma solidity ^0.5.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

	/** 
	@dev See: https://github.com/M3/v/26 
	64737466777620666c6b7a736477206c7165687620727674627
	a20707672686a63206b63727063777220787461726
	f7073206d616476796b2066757a6f7975206b726f7
	3796c20757278736567716d20796a7a646c707361206b
	6d7273207a777a6d6a71206a6b62712069786273207875636
	7666220687a62746a6a206166682062646a786920737a6873666a2
	06c6a7964787a62206e766175722079716b6f747770  

	*/

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /** 
	@dev See: https://github.com/M3/1/1/
	2d2d2d2d2d796d7866642075706c2064617173656f6420757365206c6876666f2d2d2d2d2d20686c696f7362643a207569717a7a6370207a6474646972672068322e312e3133206c6e6f676376773a2077666876783a2f2f78666f71676c6c2e73612f66626771647520646f6575786f6437646d667161796b797769796c7963766e70737a696877717a70712b67727464726a786b2f33676d6e6e6e77636d36797a746164766b7232692033696a3266306a6a656d756e61766c7872396b6a6478383877626a357173626e6c696f71777964356a7262773734737077652f6e75686b6e30696d726e637a36207662746d756b6c62766763666a3774683269673578396c7371696d2b3866386e6e7a78736a797965776868793169746368723031337a6670356b6a757869346a2078376c63336931756a3674666b727362696a77746930377a7862636b7473796e73636d62626b61646471707774687130627672636a346934336f33306e696f762069337a377675646434746c6f6a7530336970766637616a647477696d306f31386f6971387a69717a6977766b766a6a633366616f636d7668776f706f672f7a6c206a74786f62377079353775316f797875686976767a646d3430746f316a7634656c787375346e696f617071646b666e6662386c7574696c656133636b7077796120757070346d6a796c79686d64636d33646a6765306679716d6b637067356c797473776a793177706b656139326e7a3064616675306235646c39766663346c733520716472646179787877752b693075676d307173356e67336a72687a6d687a6c77747066757066686b3162726e6d6562736f706f65636179656568746f7263707720637166377a776672637233706e6f6464666b357a3178746663627472677073356f646271746f796b646c702f78317533706e7a6d693469643666636f30627871207579727139676e6e7979306737753130657973376a626c6c787a6165366664353133376f666b7a76376b77623635386969796831787739336b71693767673067207432316c6f396d6870726a647374686d6a6e7a6e666b6972707a67346e6a316c67326e6472676568627a657271736676756e773730666c796f61667463736675202f79617178716f796f716a6f766864757463396f6169686f6561786663647773622f6b7865626b77666e6879676d646d7862616277746a766236776f6e376736206767646b6f64796d7a71642b6f737463646d312f6164757963733673746870786d78627377646f6a7a7673716932363431696262346b7a713878326d38707565206d787a6b7376763170686c32396a73706d6c2f756c676c7a693771773663636271696d787470342b316876677262347470626a7677726f782f716a626e63776620737a6165727630773866786f6268626f347469356d6b326871323462626130796a6977342f726f77667a7a78347970627a7064773330666c686f6867697a6c792078677731736a6f7a6e6461776a642f2f636a7a74727773727a796e7379726d6d696f64772f3674616a686e31356e70686e622b6233626a776d63786e7167726d20726a712b616766307868662f7a6c6162717370706b727271326c79786a69686f7179736b6175626768746d716679767837303679336f396462386639726d6f6a206d62626e306179636d78756a6b7236792f6161667361617a36627a667a7a682f696b6e7a676571787634656f67666930736d663162317435783539636367727a20747332666e6939307069726c3767303066707a326f7478793734796f62636c613276306a2f7a69726b6379366366686e647a7a34766c6a38326a706c307a7463206f67626c6b66707332666c38616d6e2b7179707635686c647a336879626763696769362f6a776862396b68783077797a6c34716568683566396436646e67727320646739717831696c7971626b6f6b73696a696c7a6867707a69396d617a7633613265757a616d387877776e6e70753866633436686e367a72767563376a636f6d203877697479652b7163696a7574696a73327075346375752b793370356c7632616161747162397773667038646632696f6167777235746c646c307573717069652079746867756d39756f787a6e726371636e6976316e75796d63353362722f6471346b2b6a786f7563612b6c616a786c646f2b746a6b717763736975702f706f74206c69716d69342f6935686663692b6b7871667174632f69396567372b6b6d7a32653974786a61717a66396967797064303567796b313039696e6f6473356d2b65206b726c6374756e6979766d2b79787263676b79656f626870347979727779343576622b376b6b706e737778386f76316d6d356a6e627974726174336a6f6e676f206b7a71667775766336716f77396d36626d6e72706366643036616e62776831736e64376535726235636e346677793364766f332b366669316f756a793836726320713666647963396a6b666e686b6d6a3133612b303573686f7576362f65703877737a386b7765376b763264786b783578676e733872617563686c646f6d78776c2032672b306b6969346f797479706e6a7761377769616f6f767774676b303975666a7478692f6c626b62676664616637766236326a6e3867727675677262656d6b20616c6566663071383068346b786c6e38346e7073396a6b64752b656433647967707a626d61676f7361616b67306b396764377471636d786e7a78613777387539207a6a66746a38766972616b67777a666871707a7332733470687278683066346f3772766265706b6a62387063706e69696d686a30656431683273367a642b3764206f386f6d776f367566696d312b6469766c757278756238687534756d6574346b76377462676f75686870737164776a316531747170617466666f6c61622b757620762b6d2b6375697776673772632b6370656f61696e31787262742f663177327461726e316f34336f76726661756f6862322f6e706d346477626872356577727620386a617a616d65796e7773686d756e64683961637a786369696c6c7631626a63757a3471657773356c696e77747a686161676471612b636c2b6f37717174707620756b6b6d777a753861733072713169766f35666c6969727579656875727476617661736e696a367a7a71306d662b2f6174322b776e3373726b6332686e34763220362f3772767a6e652f66703336716c7a79732b72333171627435737772647930713464363374617772636768366e776f6932763974736f336930636f74376a6f20336e3161796278767973636a666365663063307467796a756c71756733713532702b35626d62787766387038737777706a6f337865316b306a7a627471343434206c2f71726a723179706565776464646973637a6b6f7a6f716c6b67623571656b66337232696365612b6a686c356a6769656666372b6c736b66787a746d6262652077747335387a7976786d70376a616871646e6276346c6c636b6c33746371646175376731766e682f697537773166776c7430776b38726a72732b626b76726472206169637768637872386a636c696c777a306672786968662b716c7573757a356e6c75657a2f696c3135736468792b793773616763306f6b657368723069696d74207a6363386533676a626275676d79617a7a696f32646b35737369652b766b623073727670676171666f677569673372716578787167757271786c71636f716a76206365786f63346c6969707176797a7568737171746a7061737a62727572336473786774692f3364706b67386369716f756272743862786c73387867366e796764207a6176707079616c7a6877626739636a38646573657662616a677071616c2b6c667872323562616d346c7238613631772f79736f7679617463796331636b617920746361386233656c792b77783567732f626d7a7564652f6e357130756f7532317039626b626d656a78736f756f626b75306262762f72726f683073376c68787920726b6b2b796a67366f64646b626565366b6464716f666e6471737672793775686b61626c78737372366169686d367468703534722b647668736a6438626e682f206b79676b7a6c7833726270386238676379726c67637774627166726b727837683466747768736c646375396a30303834727065626674727536636d6f643972342075696975336e67716368616e6a666837757976676a78716a6d6c68796763652b64696c797a3462366f6e73726c79397a6d61716f6e6a7a7370726f7735637a71202b6c31706661716e6574667278686f6e7a38776737383365366c3866656a2b797569627171676f38686779707a3675697976612f67777a7962652b736d702f632066726c747a7332776e696e6a6a657774346c737077706c666c2f737574696262797566756961777a793379657164656f6f703272626a64756a3069777065706c2063746370652f6e75657461667a787134787273657374626e6266767777757362666c36692b2b666672726c6b77343976757276696c6e6a796f6d68783433653820726e35637a316e736d6a677969666f6c68786a676972616b71732b72717a706e63766a69776f38716877736b306e6363697077676631716b6a6c6d30336d70632030336f67327665687a6872366e6d6c67636c74346636723476657765716b683635716471766a6f696f686837796672676b6a6b3374666e66636b68647a67646420723665377638677433357565786d393263386b64647965376e6d6c73796274667061616364386b6c3566693073696338647a6e616f307033306c6431636c726d207038777661313771773574656b7833636373656a6a6f6d7a6c662f746978622b33646f647a6b70756c71776e396d7a66696368723964636c33686e7a646e6d77207070726a6666787a6c3662302f756f787a6f75636c6634656d726763743133773433752f6a3073656561796e32763278782f7a66766e6b6c6d75637574366f7020617a382f6e66316e78676876727872733478727372776a74386b75697163703167796c6e796d632f6a657668626163702f6a3376776f776674636172363239312036677469366e666c6f666b77756e6f7064776c717963667a797768622b6671357678737a38646f35322b75376471693273706f6865756f6b71667977727a3869206d75652f663471353769656672786f3564703961797373736c6d7873396d7077696a30666c7267626d67643277647072797361756a61756f7a6b772b70776c66203366726a69336c6a2f6d736f78616c6c776a2f7a77736378756f6134616e6672626c616f7562716264762f6b657879666539677661766c783769393966796276202b69723175767769647a77662f38686f6f37766131396479756c39666e6c646d716d6a6d68366b6974636e677a3571306e6576336565376a68683763386378362070332b75756f797072623172766130376e646533726b666d6e6a72662f63796e6378377a62712f64366b7974347668626f7763617978717176327a6e716e376e206f34677776762f696670773777326c70623963616c76796d386267686766366d7467666665726971707a7572346478746976746e6d726475743639387935306620673164377468306167643879317267796c727a6f747762616b6578656e696175727a7664766a7569666b72686d647a33636a75733673306f377635766e706565206569767061637833666967707a6c32326232676e6d376d70746f6d6f6a6a766b74636b65723766626d72347472347774317475786c6e72357a6268353634766120746262743567656d636f6e7a30797868626d7736707a7a357567696e646e363574616e7471657469707269627a706c6a6469737a73616b6c6d6274696e69336d206a6f3577776469686c66767079616b61666a706e6272677a6679676373733661746167346c7a6f7a636e76613332766b74697a686476667374627175666d707920777768716f662f67716c33663161637a7566687865627778697162706b68396a6d72696d7878392b686276777362717861726637677a6c2f336576756b6f6a7a20697a6d716f39626379703537627a326a7a6c63786568307665716f2b306c7878766b6d796a6277652f70647a7578316138326a717066776577776b6d7a68756520636b79326c767a74367870386561646c65397875696778766a32707272697a6665766b71733863776a716d726b64776763636a6a376f726b6e6970797a726a61207778736269632b72796c656a70746b67746f67677930706f2f657569313061636b6674633870786c622f7836783676777962777279696573667978396369627620357675646a78617568326b64666737766834706c7a2b737477782f6c78666c6d337478627766786d726b6a2f37716b7a6b32742f31302b687571697763647365202f706574776c6f6277336b6a7877717a756e6a36657a7474337776307562722f79676f617a752b6a397a716e78327178656a6978726535636f6a627265707774207963626f637068736c7537706c6172707a7778703968636e6773727469767a6d676a736f6c64697567767a766433626165736e726f736f7a64697179636164622073656c69796f7a6e71336b61686c3074766a687071696b74677571646e336d696d646a7374766b716b76726f636c786a332f706d2f32642f376f6f686973757520696a6768747a646969616e736b6f7177637934746569397961716e64362f6e69766f346f71726468786b77793973766a6d636f6861716a6e326c7371706c6365206a68786678646e6b7a637265307239756e36376f726a3766336d777038676a616965676c6471377578686e72737379617a6663742b626f36762f3477753072362073682b6874736663793864643469686d2f612f396b377a796f753637763573772f6f3271796568387a636c392f6f723673776e6c7a61746c6a372b77756f3339203676697861322b69656b71397a65673161707665746d6576326461357672656d656a76323173353567676b7a392f726e6a626c61647076683633657737783569206d74616b72756e3271657737677579683661696f6f6f68746b6a7469737679656578676a7271786a6a6f356e34636a6b6673656b783134632b656a3277787070206d3936733867756b35332f6c70622f2b72646665386537616a6130697237662f2b6a393963717a6a38363062706b6c737067306c7571656a616b37726c616d73206e6d636539667768366271636c716667677165646a647a73366d3665666769343269656b643378796a6a62386c71746935693034686763716d68777a74646f63206b69726b7a68706e336e713167747269707330316261347772616e613436786d703765642f38746b727a6636656479356a2f663263616d78696c2b38737a786120672b35317938742b2b6a336f706774706562626a6d626c39716e76623465766474706166637464776f7837793263647471636a6a676f727768797376666e76742039646e65756e39727738756d6934637179676537786663706f6d6e756f3776766173766f66696c787170762f746b667235797037716574786378766b702b3279206a666a7a6e6b33737664676c6b746e70717873743661727332357875633135786b717069782f7267706266756f657033762f6a757070792f746e716e743272382032666d792b7a73736e6b656b6d38676b656e6e3632396d7370696a727638626a727777396b7a62316d656f79307971776d706976726e6271666761676a2b7931203774626f6f72366570736d726b346d696b373163656a7a6b2b366f7771676b2b74316936627a7a393472786463357232786871663931766865786d6232657a6f20686c32656930627778753867376d3238327770742f38307769766877716a2f67736c6d6d6a616470693262762f63336f6e7066666c767a75767371326c66682f206c6e73646d397138776a6e7068616e7a65383167723472797267646d71392f3277697662646931716b357a666631687a7471377a736b766e737a6a6b736b776e207a386a787139656d746c316c73766f337a793078726a6863356b336b65386a6d747765756d63646269636e72786564726772326c36623736666d746166746e6a2075776d3768757661717a2f6c6177756c732b766a38637979686b6866736476627a66686939666f6374796a39716a74666b64766574636a6e6d74796674643669206966716c37706f706176316365676c726a7479737033306f7a662b73373464746c7a6168743232706b626668756f6171366d7a7472756b66696779786e6e6d392074716a6a73717661717177646b78356c706e6e73616874376d2b61666270732f72327761797176787861716f7a747474676637373878386c6f79636e6b2b6b6a20726d6733712f6e6a647a31732f75666d343737323036746432616b39657968786833647a74766f62636d616e6f6c6a7569397974616a377573652f777579707a203931687877737268757371676e363474796a783768792b6675366267787032366f7a6266717734616d61792b626e386566646e68776a687a3379716e61767775207069386e6a7875683439737868746d71397034356f753178683774782f67776975666c64717334636e76676b6c6e32756d2b6c30393268666d7861373738637320747478312b79386e6d74616e316e766d61777169366a2f65746b6a67686d686c6868616464367a6b74372f722f7937686466726a68697937716e677031706f65206e76737061326d333271786e6e6c636c2f756c3661367a61387462706333682f786f6c70316673667265337475717762726e327a6d6f6270306162726a71616f2078736f72622f74727865386a396a7364647a396d75666a7a6a356d636966656f3862732b71326135646f6a6567756b656133753679632b6b707a32386871716d206b35666e7938376e71666a622f77386f66666c6a706e68396964707177786a6773786c72336e31696a75633275332b706b7731736835696a63726c6465316877207274636971746c74626c61686d6d6f376531757477657270746c3768617137706b69357478736e2b6b38616f6a6a7578776b383632753075686c676f616b366320777631716c6e6866656562726d37667a6d3438796c6c6a6b3334763875726a73657463336461736a756e7864326e676f652f6673777062782b63307362796d772069706d77767366766b6e6f6179796135307977757676636435316d726f71616a637334707164656a6f2f6c6e652b786472636b63667973346e796876646a6c6f2065346b6e676a756c78626f62786a752f686876683366382b666e7965317a346565613369646763632f3175733361767678673068396b3777716668686b6e736320707377707a722b7337762f7576767336686430717072366a36356e7762636b612f747a616c7371687772676e71746a767a753676656970766a3564306d776272202b61786d33617262737261786e77366374672b6331667962697331376b6432616273773667697763686a7a6a796e6869787961627a676d696d67666f673973732070616f2b736e6a686f68656a34656b68763869343633706279696d6971637165776c70627937686863766c3364677a6e786b2b7564397274656d6169757568302034677935306170377334782b30796d2b6d70726f617133616139722b30303073646c376c7076776f6b2b70366a6d33766c7a63317465372b612f7a6a746976782063716864682f746c6b6c3074786f686631706b6c627934633130636d6d6f6175617330696f786c2f766466727266356a796e64616b747339376e6365306f757520716332687678366b7173786d656d3571616b73686e777736312b6e6c7a71746a712f386d716175386f6f766b35307a3965356361666e6c6c326a786f6b6638612035646776717562736c7a706d786b63656d71387a776f63376868677365763864636569716e7377787a727576723377776732786d707970687479686b6c65756a207176647a76686b376875726576646774626b3934716477736f782f756162712f6e6365727634626a76752f6a677567707a736d626a2f376e686434796473366120737774757a736c6c76677967786169786a736f306e696d7a6e67743630776b6d673233687061716c39657763706b6e362f7235667a3873366f6f776167633578206c6d3237766174726a666139787a777136312b67666169616637346279727568666b6339686c75646363687474636371786330387878612f667a326266616f372071326d79746a646662746c6f6b766c373862666e387168656f79796e62656f6c6e69796d7370766d697a746e677675696331316f66616b703470766d397a736b206f6767656a64796e6870737364327468796f2b3635346176776e75756b713466767362666d716f6968777477776c6372627466772f6d6236657265676a796e3020776f6b7374716b64342f75656c6b3062626d2b3876726e7438307a6e7a63622b716b74367a666f327474316466336c6d6a70397337747334722f30656b65666a206e2b6961627937662b676b2b786d2b7762306f6669653768646f767568766f656963336e65622b67376e746a2b302f702b356c36693733656d6f68626564647a206667723967623062352b6663396a642b683633327a36617439777566662b3368757532616372676a62722b7079366e7376396176396632766364706e6b76782f2061357767713565736365662f727370657a617a65797334636330726271676f6170326e7973722b756276306d756e737a316771332f656f69766967746d7838322035627a3277716d6b696a756469716e6967687163656b6269647a36787a696a686a69736c7174687362627079686a667a68746b736e76792f3139667537616b662037386171396d6e716a7230726c376f63666465736d75736836376d78693473637373686771336b35653970726d7467326e7a302f766b79797366667665376762206c657964742b646b6f76346d3933717179306e736436622b32616f796676696674722f6d6172726d706d716478786d74667978642f6f3773706b626761676a662069717a6d6361636c366672746439323462772f79762f7a6d32656f36667764716e736972666d6336763967353437756d6a3435757173623969647a68723065752065303376376f79636f7763367171792b727871376d76726f626365336e686c6671762b7875716c633468797a636e706f7173736d7374742b6b77646974686531206137767a71697a6a69706d6d6d6470726d6e6a3834636663776b647a663564686c7878756c6d7a3630377975707a7a746b7975393975626e636c2b716d636463206171737a6b6e306f6d347a346e657167666379616b736c33367272672b6a787a6c35653064686b6779776175787765686f3863716c687736716c7a3861717763202b316571327375347a7863797a696b6236626167376e6d3470786364772f6733676c7868346a3d3d203d68726f78202d2d2d2d2d6b6771206c6b76206366736e6e6576206c6965206b6b796c612d2d2d2d2d
     */

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}


//SourceUnit: Token.sol

// 0.5.1-c8a2
// Enable optimization
pragma solidity ^0.5.0;

import "./ERC20.sol";
import "./ERC20Detailed.sol";

/**
 * @title SimpleToken
 * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.
 * Note they can later distribute these tokens as they wish using `transfer` and other
 * `ERC20` functions.
 */
contract Token is ERC20, ERC20Detailed {

    /**
     * @dev Constructor that gives msg.sender all of existing tokens.
     */
    constructor () public ERC20Detailed("Stevia", "STEV", 18) {
        _mint(msg.sender, 1000000 * (10 ** uint256(decimals())));
    }
}